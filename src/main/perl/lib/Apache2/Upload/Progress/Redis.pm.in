package Apache2::Upload::Progress::Redis;

use strict;
use warnings;

use Redis qw();

use English qw(-no_match_vars);
use Data::Dumper;

use Apache2::Module qw(add);

use Readonly;

# defaults
Readonly our $REDIS_SERVER        => 'localhost';
Readonly our $REDIS_PORT          => 6379;
Readonly our $REDIS_EXPIRE_TIME   => 60;
Readonly our $REDIS_MAX_SCAN_KEYS => 1000;

our $REDIS;
our $VERSION = '@PACKAGE_VERSION@';

use parent qw(Exporter);

our @EXPORT = qw(
  set_session_key
  get_session_key
  get_all_session_keys
  get_upload_status
  flush_session_cache
  init_cache
);

# right now Apache2::Upload::Progress 'use's this module so we have
# circular depdendcy...this allows perl -wc to compile and syntax
# check this module in the Makefile..
#
# TODO: Apach2::Upload::Progress should not 'use' cache implementers
# like this

if ( !$COMPILING ) {
  require Apache2::Upload::Progress;

  Apache2::Upload::Progress->import(qw(get_config dumper));
}

########################################################################
sub set_session_key {
########################################################################
  my ( $r, $key, $value, $expire_time ) = @_;

  my $redis  = get_redis($r);
  my $config = get_config($r);

  my $redis_expire_time = $config->get_redis->{timeout};

  r_set_session_key(
    $redis,
    key         => $key,
    value       => $value,
    expire_time => $redis_expire_time // $expire_time,
  );

  return;
}

########################################################################
sub get_upload_status {
########################################################################
  my ( $r, $id ) = @_;

  return r_get_session_key( get_redis($r), $id );
}

########################################################################
sub flush_session_cache {
########################################################################
  my ( $r, $session_id ) = @_;

  my $redis = get_redis($r);

  my $keys = r_get_all_session_keys( $redis, $session_id );

  foreach ( @{$keys} ) {
    $redis->del($_);
  }

  return $keys;
}

########################################################################
sub get_session_key {
########################################################################
  my ( $r, $id ) = @_;

  print {*STDERR} Dumper( [ 'get_session_key' => [ $r, $id ] ] );

  if ( !$r ) {
    print {*STDERR} "usage: get_session_key(r, id)\n";

    return;
  }
  else {
    print {*STDERR} Dumper($r);

    return
      if !$id || $id eq 'foo';
  }

  return r_get_session_key( get_redis($r), $id );
}

########################################################################
sub get_all_session_keys {
########################################################################
  my ( $r, $session_id ) = @_;

  return r_get_all_session_keys( get_redis($r), $session_id );
}

########################################################################
sub init_cache {
########################################################################
  my ($s) = @_;

  print {*STDERR} "initializing cache\n";

  return get_redis($s);
}

########################################################################
# REDIS FUNCTIONS
########################################################################
sub get_redis {
########################################################################
  my ($r) = @_;

  return $REDIS
    if $REDIS;

  my $config = get_config($r);

  $REDIS = eval {
    if ( !$config->get_redis ) {
      my $errmsg = 'invalid configuration, no "redis" configuration';

      $r->log->error($errmsg);
      die $errmsg;
    }

    my ( $server, $port ) = @{ $config->get_redis }{qw(server port)};

    $port   //= $REDIS_PORT;
    $server //= $REDIS_SERVER;

    my $server_name = sprintf '%s:%s', $server, $port;

    return Redis->new( server => $server_name );
  };

  if ( !$REDIS || $EVAL_ERROR ) {
    $r
      && $r->log->error(
      'could not initialize redis client: ' . $EVAL_ERROR );
  }
  else {
    $r && $r->log->info(
      sprintf 'redis client initialized for %s:%s',
      @{ $config->get_redis }{qw(server port)},
    );
  }

  return $REDIS;
}

# r_get_session_key(redis, key)
########################################################################
sub r_get_session_key {
########################################################################
  my ( $redis, $key ) = @_;

  my %file_status = @{ $redis->hgetall($key) || [] };

  return \%file_status;
}

# r_get_all_session_keys(redis, session-id)
########################################################################
sub r_get_all_session_keys {
########################################################################
  my ( $redis, $session_id ) = @_;

  my $cursor = '0';
  my $keys   = [];
  my $found_keys;

  my @scan_args
    = ( 'MATCH', $session_id . q{*}, 'COUNT', $REDIS_MAX_SCAN_KEYS );

  while ( defined $cursor ) {
    my $result = $redis->scan( $cursor, @scan_args );

    ( $cursor, $found_keys ) = @{$result};

    push @{$keys}, @{$found_keys};

    last if !$cursor;
  }

  return $found_keys;
}

# r_set_session_key(redis, key => key, value => value, [expire_time => time]
########################################################################
sub r_set_session_key {
########################################################################
  my ( $redis, %args ) = @_;

  $redis->hset( $args{key}, %{ $args{value} } );

  if ( exists $args{expire_time} ) {
    $redis->expire( $args{key}, $args{expire_time} // $REDIS_EXPIRE_TIME );
  }

  return $redis->ttl( $args{key} );
}

1;

__END__
