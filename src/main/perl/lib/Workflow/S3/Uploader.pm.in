package Workflow::S3::Uploader;

# AWS S3 file upload handler for inotify events

use strict;
use warnings;

use Amazon::Credentials;
use Amazon::S3;
use Carp;
use Data::Dumper;
use English qw(-no_match_vars);
use File::HomeDir;
use Getopt::Long qw(:config no_ignore_case);
use Log::Log4perl;
use Log::Log4perl::Level;
use Linux::Inotify2;

use Readonly;

Readonly::Hash our %LOG4PERL_LEVELS => (
  error => $ERROR,
  warn  => $WARN,
  info  => $INFO,
  debug => $DEBUG,
  trace => $TRACE,
);

use parent qw(Workflow::Inotify::Handler);

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(
  qw(
    bucket
    credentials
    fullname
    logger
    mask
    name
    s3
  )
);

Readonly our $TRUE  => 1;
Readonly our $FALSE => 0;

Readonly our $EMPTY => q{};
Readonly our $SLASH => q{/};

our $VERSION = '@PACKAGE_VERSION@'; ## no critic (RequireInterpolation)

caller or __PACKAGE__->main();

########################################################################
sub handler {
########################################################################
  my ( $self, $event ) = @_;

  return
    if $event->mask != IN_CLOSE_WRITE;

  my $name     = $event->name;
  my $fullname = $event->fullname;
  my $account;

  $self->get_logger->info( sprintf 'event received for %s', $fullname );

  if ( $name =~ /^(\d+)-(.*?)$/xsm ) {
    ( $account, $name ) = ( $1, $2 );
  }
  else {
    $account = 'trash';
  }

  my $bucket_prefix = $self->get_bucket_prefix // $SLASH;

  my $key = sprintf '%s/%s/%s', $bucket_prefix, $account, $name;

  $self->get_logger->info(
    sub {
      return sprintf 'attempting to store object to s3://%s/%s',
        $self->get_bucket_name, $key;
    }
  );

  my $bucket = $self->get_bucket;

  my $retval = $bucket->add_key_filename( $key, $fullname );

  if ( !$retval ) {
    $self->get_logger->error(
      sub {
        return Dumper(
          [ $bucket->err, $bucket->errstr, $bucket->last_response ] );
      }
    );
  }

  return;
}

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  my $self = $class->SUPER::new(@args);

  $self->init_logger;

  $self->init_credentials;

  $self->init_s3;

  $self->get_logger->info( sprintf '%s initialized', __PACKAGE__ );

  my $settings = <<'END_OF_SETTINGS';
-------------------------------
host...........%s
bucket_name....%s
bucket_prifix..%s
profile........%s
region.........%s
secure.........%s
END_OF_SETTINGS

  $self->get_logger->info(
    sprintf $settings,
    map { $self->get($_) // $EMPTY }
      qw(host bucket_name bucket_prefix profile region secure)
  );

  return $self;
}

########################################################################
sub init_s3 {
########################################################################
  my ($self) = @_;

  my $bucket_name = $self->get_bucket_name;

  croak "no bucket name\n"
    if !$bucket_name;

  my $host = $self->get_host;

  my $protocol = 'http';

  if ( $host =~ /^(https?):\/\/(.*)$/xsmi ) {
    $protocol = $1;
    $host     = $2;
  }

  my $secure = $protocol eq 'https' ? $TRUE : $FALSE;

  my $s3 = Amazon::S3->new(
    { credentials => $self->get_credentials,
      host        => $host,
      logger      => $self->get_logger,
      region      => $self->get_region,
      secure      => $secure,
    }
  );

  $self->get_logger->debug(
    sprintf "S3 settings\nhost: %s://%s\nregion: %s\n",
    $protocol, $host, $self->get_region );

  $self->set_s3($s3);

  $self->set_bucket( $s3->bucket( { bucket => $bucket_name } ) );

  return $self;
}

########################################################################
sub init_credentials {
########################################################################
  my ($self) = @_;

  my $credentials = Amazon::Credentials->new(
    { order   => [qw(env file)],
      profile => $self->get_profile,
      logger  => $self->get_logger,
    }
  );

  $self->set_credentials($credentials);

  return $self;
}

########################################################################
sub init_logger {
########################################################################
  my ($self) = @_;

  my $log4perl_conf = $self->get_log4perl_conf;

  croak "no log4perl configuration!\n"
    if !$log4perl_conf;

  my $logger = eval {
    if ($log4perl_conf) {
      Log::Log4perl->init( \$log4perl_conf );

      $self->set_logger( Log::Log4perl->get_logger );

      return $self->get_logger();
    }
  };

  if ( !$logger || $EVAL_ERROR ) {
    croak "error initializing logger:\n$EVAL_ERROR";
  }

  my $level = { reverse %LOG4PERL_LEVELS }->{ $logger->level };

  # this ends up in `inotify.pl` log...
  print {*STDERR} sprintf "[%s]::handler logging initialized at %s level\n",
    __PACKAGE__, $level;

  return $self;
}

# mock's to simulate event in main()

########################################################################
sub name {
########################################################################
  return shift->get_name;
}

########################################################################
sub mask {
########################################################################
  return shift->get_mask;
}

########################################################################
sub fullname {
########################################################################
  return shift->get_fullname;
}

########################################################################
sub main {
########################################################################

  # poor man's way to upload a file with a key to the bucket defined
  # in the configuration file you provided on the command line while
  # testing ...

  # you did something like this:

  #  perl -I $HOME/lib/perl5 Workflow/S3/Uploader.pm \
  #     --config=$HOME/workflow/config.d/upload.cfg \
  #     --key=config/upload.config
  #     ~/workflow/config.d/upload.cfg

  use Getopt::Long;
  use File::Basename qw(basename);

  my %options;

  GetOptions( \%options, 'config=s', 'key=s' );

  my $handler = __PACKAGE__->new( $options{config} );

  my $file = shift @ARGV;
  my $key  = $options{key} // basename $file;

  # assuming your handler has mocked name(), mask(), and fullname()
  my $event = $handler;

  # simulate an event...
  $event->set_fullname($file);
  $event->set_name($key);
  $event->set_mask(IN_CLOSE_WRITE);

  $handler->handler($event);

  return;
}

1;

__END__

## no critic (RequirePodSections)

__END__

=pod

=head1 NAME

Workflow::S3::Uploader - handler for uploading objects to S3

=head1 SYNOPSIS

 require Workflow::S3::Uploader;

 my $handler = Workflow::S3::Uploader->new('upload.cfg');

 # assuming your handler has mocked name(), mask(), and fullname()
 my $event = $handler;

 # simulate an event...
 $event->set_fullname($file);
 $event->set_name($key);
 $event->set_mask(IN_CLOSE_WRITE);

 $handler->handler($event);

=head1 DESCRIPTION

This class represents a handler used with L<Workflow::Inotify>. Its
purpose is to respond to I<inotify> events by moving a file from a
local directory to S3.

=head1 METHODS AND SUBROUTINES

=head2 handler

 handler(event)

=head1 SEE ALSO

L<Workflow::Inotify>, L<Linux::Inotify2>

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut
